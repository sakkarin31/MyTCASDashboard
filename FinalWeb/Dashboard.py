import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Page configuration
st.set_page_config(
    page_title="Thai University Computer Engineering Dashboard",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
    }
    .university-highlight {
        background-color: #e8f4f8;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Load and process the university data"""
    # Read the CSV file
    df = pd.read_csv('MainData.csv')
    
    # Clean column names
    df.columns = df.columns.str.strip()
    
    # Convert fee to numeric, handling any formatting issues
    df['fee/term'] = pd.to_numeric(df['fee/term'], errors='coerce')
    
    # Convert admission rounds to numeric, replacing '-' with 0
    admission_cols = ['r1', 'r2', 'r3', 'r4']
    for col in admission_cols:
        df[col] = df[col].replace('-', 0)
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    
    # Calculate total admission slots
    df['total_admission'] = df[admission_cols].sum(axis=1)
    
    # Categorize universities by type
    def categorize_university(name):
        if '‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå' in name or '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' in name or '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà' in name or '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô' in name or '‡∏™‡∏á‡∏Ç‡∏•‡∏≤‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå' in name:
            return '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥'
        elif '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ' in name or '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô' in name:
            return '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ'
        elif '‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è' in name or '‡∏£‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏´‡∏á' in name:
            return '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è/‡πÄ‡∏õ‡∏¥‡∏î'
        else:
            return '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô'
    
    df['university_type'] = df['university'].apply(categorize_university)
    
    return df

def main():
    st.markdown('<h1 class="main-header">üéì Thai University Computer Engineering Dashboard</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p>', unsafe_allow_html=True)
    
    # Load data
    df = load_data()
    
    # Sidebar filters
    st.sidebar.header("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # Fee range filter
    min_fee, max_fee = st.sidebar.slider(
        "‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó)",
        min_value=int(df['fee/term'].min()),
        max_value=int(df['fee/term'].max()),
        value=(int(df['fee/term'].min()), int(df['fee/term'].max())),
        step=1000
    )
    
    # University type filter
    university_types = st.sidebar.multiselect(
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
        options=df['university_type'].unique(),
        default=df['university_type'].unique()
    )
    
    # Minimum admission slots filter
    min_admission = st.sidebar.number_input(
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥",
        min_value=0,
        max_value=int(df['total_admission'].max()),
        value=0
    )
    
    # Filter data
    filtered_df = df[
        (df['fee/term'] >= min_fee) & 
        (df['fee/term'] <= max_fee) &
        (df['university_type'].isin(university_types)) &
        (df['total_admission'] >= min_admission)
    ]
    
    # Main dashboard
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£",
            value=len(filtered_df),
            delta=f"{len(filtered_df)}/{len(df)} ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"
        )
    
    with col2:
        avg_fee = filtered_df['fee/term'].mean()
        st.metric(
            label="üí∞ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
            value=f"‡∏ø{avg_fee:,.0f}",
            delta=f"‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏≠‡∏°"
        )
    
    with col3:
        total_slots = filtered_df['total_admission'].sum()
        st.metric(
            label="üéØ ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            value=f"{total_slots:,}",
            delta="‡∏Ñ‡∏ô"
        )
    
    with col4:
        avg_slots = filtered_df['total_admission'].mean()
        st.metric(
            label="üìä ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£",
            value=f"{avg_slots:.0f}",
            delta="‡∏Ñ‡∏ô"
        )
    
    # Charts section
    st.markdown("---")
    
    # Fee vs Admission Analysis
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∞ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")
        
        fig_box = px.box(
            filtered_df, 
            x='university_type', 
            y='fee/term',
            color='university_type',
            title="‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
        )
        fig_box.update_layout(
            xaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢",
            yaxis_title="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó)",
            showlegend=False
        )
        fig_box.update_xaxes(tickangle=45)
        st.plotly_chart(fig_box, use_container_width=True)
    
    with col2:
        st.subheader("üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö")
        
        # Prepare data for admission rounds
        admission_data = filtered_df[['r1', 'r2', 'r3', 'r4']].sum()
        
        fig_pie = px.pie(
            values=admission_data.values,
            names=['‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1', '‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2', '‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 3', '‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 4'],
            title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö"
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    # Scatter plot: Fee vs Total Admission
    st.subheader("üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö")
    
    fig_scatter = px.scatter(
        filtered_df,
        x='fee/term',
        y='total_admission',
        color='university_type',
        size='total_admission',
        hover_data=['university', 'program_name'],
        title="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° vs ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö (‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏∏‡∏î = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö)"
    )
    fig_scatter.update_layout(
        xaxis_title="‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó)",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° (‡∏Ñ‡∏ô)"
    )
    st.plotly_chart(fig_scatter, use_container_width=True)
    
    # Top universities by different criteria
    st.markdown("---")
    st.subheader("üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")
    
    tab1, tab2 = st.tabs(["üí∞ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", "üéØ ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"])
    
    with tab1:
        cheapest = filtered_df.nsmallest(10, 'fee/term')[['university', 'program_name', 'fee/term', 'total_admission']]
        cheapest['fee/term'] = cheapest['fee/term'].apply(lambda x: f"‡∏ø{x:,.0f}")
        st.dataframe(cheapest, use_container_width=True, hide_index=True)
    
    with tab2:
        most_admission = filtered_df.nlargest(10, 'total_admission')[['university', 'program_name', 'fee/term', 'total_admission']]
        most_admission['fee/term'] = most_admission['fee/term'].apply(lambda x: f"‡∏ø{x:,.0f}")
        st.dataframe(most_admission, use_container_width=True, hide_index=True)
    
    # Detailed university table
    st.markdown("---")
    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    
    # Prepare display dataframe
    display_df = filtered_df[['university', 'faculty', 'program_name', 'fee/term', 'r1', 'r2', 'r3', 'r4', 'total_admission', 'university_type']].copy()
    display_df['fee/term'] = display_df['fee/term'].apply(lambda x: f"‡∏ø{x:,.0f}")
    display_df = display_df.rename(columns={
        'university': '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
        'faculty': '‡∏Ñ‡∏ì‡∏∞',
        'program_name': '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£',
        'fee/term': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°',
        'r1': '‡∏£‡∏≠‡∏ö1',
        'r2': '‡∏£‡∏≠‡∏ö2', 
        'r3': '‡∏£‡∏≠‡∏ö3',
        'r4': '‡∏£‡∏≠‡∏ö4',
        'total_admission': '‡∏£‡∏ß‡∏°',
        'university_type': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'
    })
    
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢": st.column_config.TextColumn(width="large"),
            "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£": st.column_config.TextColumn(width="large"),
        }
    )
    
    # Summary insights
    st.markdown("---")
    st.subheader("üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üéØ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£:")
        # Find round with minimum admission
        round_sums = filtered_df[['r1', 'r2', 'r3', 'r4']].sum()
        min_round_col = round_sums.idxmin()
        round_number = min_round_col[-1]  # Get the number from 'r1', 'r2', etc.
        
        insights = f"""
        - **‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î:** {filtered_df.loc[filtered_df['fee/term'].idxmin(), 'university']} (‡∏ø{filtered_df['fee/term'].min():,.0f})
        - **‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:** {filtered_df.loc[filtered_df['total_admission'].idxmax(), 'university']} ({filtered_df['total_admission'].max()} ‡∏Ñ‡∏ô)
        - **‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:** ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_number} ({round_sums.min()} ‡∏Ñ‡∏ô)
        - **‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏°‡∏≤‡∏Å:** ‡∏ø{filtered_df['fee/term'].quantile(0.25):,.0f} - ‡∏ø{filtered_df['fee/term'].quantile(0.75):,.0f}
        """
        st.markdown(insights)
    
    with col2:
        st.markdown("### üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à:")
        stats = f"""
        - **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏±‡∏ê:** {len(filtered_df[filtered_df['university_type'].isin(['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥', '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è/‡πÄ‡∏õ‡∏¥‡∏î'])])} ‡πÅ‡∏´‡πà‡∏á
        - **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô:** {len(filtered_df[filtered_df['university_type'] == '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô'])} ‡πÅ‡∏´‡πà‡∏á
        - **‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏±‡∏ê:** ‡∏ø{filtered_df[filtered_df['university_type'] != '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô']['fee/term'].mean():,.0f}
        - **‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô:** ‡∏ø{filtered_df[filtered_df['university_type'] == '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô']['fee/term'].mean():,.0f}
        """
        st.markdown(stats)

    # Footer
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
            <p>üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠ | üéì ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 2025</p>
            <p><small>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á</small></p>
        </div>
        """, 
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()